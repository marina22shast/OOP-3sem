/*  Дополнить предыдущую лабораторную работу № 6
    1) Создайте иерархию классов исключений (собственных) – 3 типа и более. Сделайте наследование пользовательских типов исключений от стандартных классов .Net (например, Exception, IndexOutofRange).
    2) Смоделируйте и обработайте как минимум пять различных исключительных ситуаций на основе своих и стандартных исключений. 
       Например, не позволять при инициализации объектов передавать неверные данные, обрабатывать ошибки при работе с памятью и ошибки работы с файлами, деление на ноль, неверный индекс, нулевой указатель и т. д.
    3) В конце поставьте универсальный обработчик catch.
    4) Используйте классический вид try-catch-finally.
    5) Продемонстрируйте возможность многоразовой обработки одного исключения и проброс его выше по стеку вызовов.
    6) Обработку исключений вынести в main. При обработке выводить специфическую информацию о месте, диагностику и причине исключения. Последним должен быть блок, который отлавливает все исключения (finally).
    7) Добавьте код в одной из функций макрос Assert. Объясните что он проверяет, как будет выполняться программа в случае не выполнения условия. Объясните назначение Assert.
    8) Ознакомьтесь с классами Debug и Debugger.
    Дополнительное задание
    1. Создайте класс Logger, который будет заниматься логгированием различных событий и исключений. Логгер должен уметь логгировать ошибки/исключения, предупреждения и просто какую-то информацию.
    2. Логгер должен записывать лог в виде: время, тип_записи_лога: дополнительное сообщение. 27.10.2019 02:36, INFO: Test log message.
    3. Создайте 2 реализации логгера: FileLogger и ConsoleLogger. FileLogger будет записывать сообщения лога в файл, добавляя записи к уже существующим. ConsoleLogger – выводить сообщения на консоль.
    4. Добавьте в классы из л.р. 6 логгер так, чтобы его возможно было быстро заменить во время выполнения другим и вместо простого вывода на консоль сообщения об ошибке, используйте свой логгер.
    Т Е О Р И Я ЛР 7 :
    1.
    Некоторые типы исключений:
    DivideByZeroException        : представляет исключение, которое генерируется при делении на ноль
    ArgumentOutOfRangeException  : генерируется, если значение аргумента находится вне диапазона допустимых значений
    ArgumentException            : генерируется, если в метод для параметра передается некорректное значение
    IndexOutOfRangeException     : генерируется, если индекс элемента массива или коллекции находится вне диапазона допустимых значений
    InvalidCastException         : генерируется при попытке произвести недопустимые преобразования типов
    NullReferenceException       : генерируется при попытке обращения к объекту, который равен null (то есть по сути неопределен)
    2.
    Класс Debug предоставляет набор методов и свойств, помогающих при отладке кода. Наследование Object -> Debug
    Его метод Debug.Assert проверяет условие и если условие имеет значение false, выдается сообщение и отображается окно сообщения со стеком вызовов.
    Класс Debugger разрешает взаимодействие с отладчиком. Этот класс не наследуется.
    Т Е О Р И Я ЛР 6 :
    JSON — это формат, который хранит структурированную информацию и в основном используется для передачи данных между сервером и клиентом. 
    Файл JSON представляет собой более простую и лёгкую альтернативу расширению с аналогичными функциями XML (Extensive Markup Language).
       Мы определили следующую иерархию и композицию классов - схема :
 
    [Персона]                                        Счет                                 Операции со счетом     Платежная карта
    ThePerson                                       Account                                   AccOpers              PayCard
        |                 ____________________________|____________________________                                    |
     Клиент  [  Адрес     Накопительный      Валютный      Расчетный          Общий                         Дебетовая      Кредитная     ]
   TheClient   Address  AccountCumulative AccountCurrency AccountSettlement AccountTotal                  PayCardDebet   PayCardCredit                                                                          
                                                                                                                             
                                                         
                                                   
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {

            // создадим на основе нашей иерархии классов Банк

            Bank TheBank = new Bank();

            try
            {

                TheBank.Add(new TheClient("Шейбак Дарья", 18, 'f',
                                           "Минск", "Мирошниченко", 9, 202,
                                           "017496578256", 112.31, 12,
                                           "057570295667", 6784, "GBP", // ставим BYN вместо GBP для демонстрации Debug.Assert()
                                           "2957905752097", 4325, "ЗАО Мирамакс",
                                           "2957905752097", 442424, 2,
                                           "2342-45622-2535", "4244", 57,
                                           "2480-242454-445", "3134", 2000));

                // попытаемся получить прогнозный остаток по счету с коэффициентом 0 - спровоцируем деление на ноль

                double LookBallance = AccOpers.GetLookBallance(((TheClient)TheBank.PersonRegistry).AccCumul, 1); // ставим 0 вместо 1 для провокации исключения
                Console.WriteLine("Прогнозный остаток по счету: {0} : {1}", ((TheClient)TheBank.PersonRegistry).AccCumul.AccountNumber, LookBallance);

                Console.ReadKey();

                // проверим доступность записи о клиенте в реестре клиентов банка
                int idx = 0;
                Console.Write("Введите индекс клиента в реестре клиентов банка (0-based) : ");
                idx = int.Parse(Console.ReadLine());

                TheBank.Persons.ElementAt(idx);

                // удалим информацию о клиенте
                TheBank.Remove("Шейбак Дарья");
                // теперь реестр пуст - проинициализируем его из обычного текстового файла
                BankController.LoadFromTEXTFile(TheBank, "CLIENTS.TXT");
                //BankController.LoadFromTEXTFile(TheBank, "SOME_BANK_CLIENTS.TXT");
                TheBank.PrintPersons();

                string date_now = DateTime.Now.ToString();
                if (date_now.Substring(0, 10) == "25.11.2021") throw new Exception(); // отправимся в универсальный обработчик исключений
                else Console.WriteLine("\n\nСессия клиентского менеджера завершена " + DateTime.Now.ToString());

            }
            catch (AccountException ex)
            {

                Console.WriteLine("Ошибка регистрации счета клиента: {0}", ex.Message);
                Console.WriteLine("Некорректное значение: {0}", ex.bad_value);

                Console.WriteLine("Регистрация счетов аварийно завершена до проведения расследования.");

            }
            catch (AccountOperException ex)
            {

                Console.WriteLine("Ошибка получения прогнозного остатка по счету: {0}", ((TheClient)TheBank.PersonRegistry).AccCumul.AccountNumber);

                Console.WriteLine("Операции со счетами аварийно завершены: {0}", ex.Message);

            }
            catch (PayCardException ex)
            {

                Console.WriteLine("Ошибка регистрации платежной карты: {0}", ex.Message);
                Console.WriteLine("Некорректное значение: {0}", ex.bad_value);

                Console.WriteLine("Регистрация платежных карт в системе процессинга Банка аварийно завершена до проведения расследования.");

            }
            catch (ArgumentOutOfRangeException ex)
            {
                //стандартное исключение
                Console.WriteLine("Введен недопустимый индекс клиента в реестре Банка : {0}", ex.Message);

            }
            catch (System.IO.FileNotFoundException ex)  // указываем пространство имен System.IO - системный ввод-вывод (Input-Output)
            {
                //стандартное исключение
                Console.WriteLine("Отказ работы с файловой копией реестра клиентов : {0}", ex.Message);

                // проброс исключения выше по стеку вызовов - при повторном вызове перехваченного исключения - 
                // не происходит удаление из стека информации о начальной точке

                //throw; //Продемонстрируйте возможность многоразовой обработки одного исключения и проброс его выше по стеку вызовов.

            }
            catch // универсальный обработчик catch
            {

                // логируем информацию о событии в консоль ПИШЕТ В КОНСОЛЬ!!!
                TheBank.ConsLogger.LogEvent("НЕПРЕДВИДЕННЫЙ ОТКАЗ В РАБОТЕ МОДУЛЯ. Регистрация клиентов остановлена.", 'E');

            }
            finally
            {
                // выведем количество записей в реестре клиентов на момент завершения работы программы
                int qclients = TheBank.Persons.Count;
                string EventStr = "";
                if (qclients == 0) EventStr = "Реестр клиентов на момент завершения сессии пуст.";
                else EventStr = "В реестре клиентов на момент завершения сессии " + qclients + " запись (-ей)";

                // логируем информацию о событии в файл на диске
                TheBank.FlLogger.LogEvent(EventStr, 'I'); // логируем в файл информационное событие ('I') //ПИШЕТ В ФАЙЛ!!!

            }

            Console.ReadKey();

        }
    }
}